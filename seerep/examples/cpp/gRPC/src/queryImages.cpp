
#include <grpcpp/create_channel.h>

#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_generators.hpp>
#include <iostream>

#include "seerep-com/image_service.grpc.fb.h"
#include "seerep-com/meta_operations.grpc.fb.h"
#include "seerep-com/point_service.grpc.fb.h"

std::shared_ptr<grpc::Channel> getChannel()
{
  return grpc::CreateChannel("localhost:9090", grpc::InsecureChannelCredentials());
}

std::optional<std::string> extractProject(flatbuffers::grpc::Message<seerep::fb::ProjectInfos>& response_msg,
                                          std::string projectName)
{
  const seerep::fb::ProjectInfos* response = response_msg.GetRoot();

  for (auto project : *response->projects())
  {
    if (project->name()->str() == projectName)
    {
      std::cout << project->name()->str() << " " << project->uuid()->str() << std::endl;
      return project->uuid()->str();
    }
  }
  return std::nullopt;
}

std::optional<std::string> getProjectUUID(std::string projectName, std::shared_ptr<grpc::Channel> channel)
{
  auto stub = seerep::fb::MetaOperations::NewStub(channel);

  flatbuffers::grpc::MessageBuilder mb;
  auto request_offset = seerep::fb::CreateEmpty(mb);
  mb.Finish(request_offset);
  auto request_msg = mb.ReleaseMessage<seerep::fb::Empty>();

  grpc::ClientContext context;
  flatbuffers::grpc::Message<seerep::fb::ProjectInfos> response_msg;
  auto status = stub->GetProjects(&context, request_msg, &response_msg);

  if (status.ok())
  {
    return extractProject(response_msg, projectName);
  }
  else
  {
    std::cerr << status.error_code() << ": " << status.error_message() << std::endl;
  }
  return std::nullopt;
}

flatbuffers::Offset<seerep::fb::Header> createHeaderMsg(flatbuffers::grpc::MessageBuilder& mb,
                                                        const seerep::fb::Header* imageHeader)
{
  auto uuidProject = mb.CreateString(imageHeader->uuid_project()->str());
  auto frameIdMsg = mb.CreateString(imageHeader->frame_id()->str());

  seerep::fb::TimestampBuilder timeStampBuilder(mb);
  timeStampBuilder.add_seconds(imageHeader->stamp()->seconds());
  timeStampBuilder.add_nanos(imageHeader->stamp()->nanos());
  auto timeStampMsg = timeStampBuilder.Finish();

  seerep::fb::HeaderBuilder headerBuilder(mb);
  // headerBuilder.add_uuid_msgs();//will be generated by server if not set
  headerBuilder.add_frame_id(frameIdMsg);
  headerBuilder.add_stamp(timeStampMsg);
  headerBuilder.add_uuid_project(uuidProject);
  return headerBuilder.Finish();
}

flatbuffers::Offset<seerep::fb::Point> createPoint(flatbuffers::grpc::MessageBuilder& mb)
{
  seerep::fb::PointBuilder pointBuilder(mb);
  pointBuilder.add_x(0.1);
  pointBuilder.add_y(0.2);
  pointBuilder.add_z(1);
  return pointBuilder.Finish();
}

flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<seerep::fb::LabelsWithInstanceWithCategory>>>
createLabelWithInstance(flatbuffers::grpc::MessageBuilder& mb, const seerep::fb::BoundingBox2DLabeled* bb,
                        const flatbuffers::String* category)
{
  auto instanceUuidMsg = mb.CreateString(bb->labelWithInstance()->instanceUuid()->str());
  auto labelMsg = mb.CreateString(bb->labelWithInstance()->label()->str());

  std::vector<flatbuffers::Offset<seerep::fb::LabelWithInstance>> labelWithInstanceVector;
  std::vector<flatbuffers::Offset<seerep::fb::LabelsWithInstanceWithCategory>> labelsWithInstanceWithCategoryVector;

  seerep::fb::LabelWithInstanceBuilder labelWithInstanceBuilder(mb);
  labelWithInstanceBuilder.add_instanceUuid(instanceUuidMsg);
  labelWithInstanceBuilder.add_label(labelMsg);
  labelWithInstanceVector.push_back(labelWithInstanceBuilder.Finish());
  auto labelsWithInstance = mb.CreateVector(labelWithInstanceVector);

  auto categoryOffset = mb.CreateString(category);
  seerep::fb::LabelsWithInstanceWithCategoryBuilder labelsWithInstanceWithCategoryBuilder(mb);
  labelsWithInstanceWithCategoryBuilder.add_category(categoryOffset);
  labelsWithInstanceWithCategoryBuilder.add_labelsWithInstance(labelsWithInstance);
  labelsWithInstanceWithCategoryVector.push_back(labelsWithInstanceWithCategoryBuilder.Finish());

  return mb.CreateVector(labelsWithInstanceWithCategoryVector);
}

flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<seerep::fb::UnionMapEntry>>>
createAttributes(flatbuffers::grpc::MessageBuilder& mb)
{
  std::vector<flatbuffers::Offset<seerep::fb::UnionMapEntry>> unionMapEntryVector;

  auto key1Msg = mb.CreateString("example key 1");
  auto value1Msg = mb.CreateString("example value 1");
  auto value1UnionMsg = seerep::fb::CreateString(mb, value1Msg);
  seerep::fb::UnionMapEntryBuilder unionMapEntryBuilder(mb);
  unionMapEntryBuilder.add_key(key1Msg);
  unionMapEntryBuilder.add_value_type(seerep::fb::Datatypes_String);
  unionMapEntryBuilder.add_value(value1UnionMsg.Union());
  unionMapEntryVector.push_back(unionMapEntryBuilder.Finish());

  auto key2Msg = mb.CreateString("example key 2");
  auto value2UnionMsg = seerep::fb::CreateInteger(mb, 42);
  seerep::fb::UnionMapEntryBuilder unionMapEntryBuilder2(mb);
  unionMapEntryBuilder2.add_key(key2Msg);
  unionMapEntryBuilder2.add_value_type(seerep::fb::Datatypes_Integer);
  unionMapEntryBuilder2.add_value(value2UnionMsg.Union());
  unionMapEntryVector.push_back(unionMapEntryBuilder2.Finish());

  return mb.CreateVector(unionMapEntryVector);
}

flatbuffers::grpc::Message<seerep::fb::PointStamped>
createPointAndAddToVector(flatbuffers::grpc::MessageBuilder& mb, const seerep::fb::Header* imageHeader,
                          const seerep::fb::BoundingBox2DLabeled* bb, const flatbuffers::String* category)
{
  auto headerMsg = createHeaderMsg(mb, imageHeader);
  auto pointMsg = createPoint(mb);
  auto labelMsg = createLabelWithInstance(mb, bb, category);
  auto attributesMsg = createAttributes(mb);

  seerep::fb::PointStampedBuilder pointStampedBuilder(mb);
  pointStampedBuilder.add_header(headerMsg);
  pointStampedBuilder.add_point(pointMsg);
  pointStampedBuilder.add_labels_general(labelMsg);
  pointStampedBuilder.add_attribute(attributesMsg);
  auto pointStamped = pointStampedBuilder.Finish();
  mb.Finish(pointStamped);

  return mb.ReleaseMessage<seerep::fb::PointStamped>();
}

flatbuffers::grpc::Message<seerep::fb::Query> createQuery(flatbuffers::grpc::MessageBuilder& mb, std::string projectUUID)
{
  std::vector<flatbuffers::Offset<flatbuffers::String>> projectUUIDs;
  projectUUIDs.push_back(mb.CreateString(projectUUID));
  auto projectUUIDsOffset = mb.CreateVector(projectUUIDs);

  seerep::fb::QueryBuilder queryBuilder(mb);
  queryBuilder.add_projectuuid(projectUUIDsOffset);
  auto request = queryBuilder.Finish();
  mb.Finish(request);
  return mb.ReleaseMessage<seerep::fb::Query>();
}

void getImagesAndCreatePoints(std::shared_ptr<grpc::Channel> channel, std::string projectUUID)
{
  flatbuffers::grpc::MessageBuilder mb;

  auto stub = seerep::fb::ImageService::NewStub(channel);
  grpc::ClientContext contextImage;

  std::unique_ptr<grpc::ClientReader<flatbuffers::grpc::Message<seerep::fb::Image>>> reader(
      stub->GetImage(&contextImage, createQuery(mb, projectUUID)));

  std::vector<flatbuffers::grpc::Message<seerep::fb::PointStamped>> points;
  flatbuffers::grpc::Message<seerep::fb::Image> imageMsg;

  flatbuffers::grpc::Message<seerep::fb::ServerResponse> response;
  grpc::ClientContext contextPoint;
  auto stubPoint = seerep::fb::PointService::NewStub(channel);
  auto writer = stubPoint->TransferPoint(&contextPoint, &response);

  while (reader->Read(&imageMsg))
  {
    std::cout << "image uuid: " << imageMsg.GetRoot()->header()->uuid_msgs()->str() << std::endl;

    for (auto bbCat : *imageMsg.GetRoot()->labels_bb())
    {
      auto category = bbCat->category();
      for (auto bb : *bbCat->boundingBox2dLabeled())
      {
        writer->Write(createPointAndAddToVector(mb, imageMsg.GetRoot()->header(), bb, category));
      }
    }
  }

  writer->WritesDone();
  grpc::Status status = writer->Finish();

  if (status.ok())
  {
    std::cout << "send all points successfully. msg: " << response.GetRoot()->message()->str() << std::endl;
  }
  else
  {
    std::cout << "there was an error when transferring the points. msg: " << response.GetRoot()->message()->str()
              << std::endl;
  }
}

int main()
{
  std::shared_ptr<grpc::Channel> channel = getChannel();

  auto projectUUID = getProjectUUID("testproject", channel);

  if (projectUUID)
  {
    std::cout << "Query Images" << std::endl;
    getImagesAndCreatePoints(channel, projectUUID.value());
  }
  std::cout << "Hello World" << std::endl;
  return 0;
}
