cmake_minimum_required(VERSION 3.10)
project(seerep-com VERSION 0.1)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")

include(FindProtobuf)
include(ProtobufGenerateGrpcCpp)
include(ProtobufGenerateGrpcPython)
include(FindFlatBuffers)
include(BuildFlatBuffers)

find_package(Protobuf REQUIRED)
find_package(SeerepMsgs REQUIRED)
find_package(Flatbuffers REQUIRED)

list(APPEND PROTOBUF_IMPORT_DIRS ${SeerepMsgs_PROTOBUF_IMPORT_DIRS})

set(MY_PROTO_FILES
    protos/transfer-sensor-msgs.proto
    protos/meta-operations.proto
    protos/tf-service.proto
    protos/image-service.proto
    protos/point-cloud-service.proto
)

protobuf_generate_cpp(PROTO_SOURCES PROTO_HEADERS ${MY_PROTO_FILES})

set(MY_FBS_FILES
    fbs/image_service.fbs
    fbs/instance_service.fbs
    fbs/meta_operations.fbs
    fbs/point_service.fbs
    fbs/tf_service.fbs
    fbs/transfer_sensor_msgs.fbs
    fbs/point_cloud_service.fbs
)

build_flatbuffers(
  "${MY_FBS_FILES}"
  "${SeerepMsgs_FLATBUFFERS_IMPORT_DIRS}"
  fbschemas
  ""
  "${CMAKE_CURRENT_BINARY_DIR}/fbs"
  "${CMAKE_CURRENT_BINARY_DIR}/fbs"
  ""
)

set(FBS_INCLUDE_DIR ${SeerepMsgs_FLATBUFFERS_IMPORT_DIRS}
                    ${SeerepMsgs_FLATBUFFERS_IMPORT_DIRS}/fbs/seerep/fb
)

foreach(FILENAME IN LISTS MY_FBS_FILES)
  configure_file(
    "${FILENAME}" "${CMAKE_CURRENT_BINARY_DIR}/${FILENAME}" COPYONLY
  )
endforeach()

add_custom_target(fbpyschemas)
add_custom_command(
  TARGET fbpyschemas
  COMMAND flatc -p -T --grpc "*.fbs" DEPENDS fbpyschemas
  WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/fbs/"
)

add_library(FlatBuffersTarget INTERFACE)
target_include_directories(
  FlatBuffersTarget INTERFACE ${FLATBUFFERS_INCLUDE_DIR}
)
add_dependencies(FlatBuffersTarget fbschemas)
add_dependencies(FlatBuffersTarget fbpyschemas)

get_target_property(FlatBuffers_HEADERS fbschemas GENERATED_HEADERS)
get_target_property(FlatBuffers_GRPC_SOURCES fbschemas GENERATED_GRPC_CC)

# already generated by grpc_generate_python protobuf_generate_python( PY_SOURCES
# ${MY_PROTO_FILES} )

protobuf_generate_grpc_cpp(
  PROTO_GRPC_SOURCES PROTO_GRPC_HEADERS ${MY_PROTO_FILES}
)

grpc_generate_python(GRPC_PY_SOURCES ${MY_PROTO_FILES})

add_custom_target(protoPythonTarget ALL DEPENDS ${GRPC_PY_SOURCES})

add_custom_command(
  TARGET protoPythonTarget
  POST_BUILD
  COMMAND bash -c "sed -i -E \"s/^import.*_pb2/from seerep.pb &/\" *_pb2*.py"
  COMMAND bash -c "mkdir -p fbs/seerep/pb && mv *_pb2*.py fbs/seerep/pb"
  COMMAND bash -c
          "touch fbs/seerep/pb/__init__.py && touch fbs/seerep/__init__.py"
  COMMAND bash -c "cp -r ../seerep-msgs/protos/seerep/pb fbs/seerep"
  VERBATIM
)

include_directories(
  ${CMAKE_BUILD_PATH} ${SeerepMsgs_INCLUDE_DIRS} ${PROTOBUF_INCLUDE_DIR}
)

configure_file(SeerepComConfig.h.in SeerepComConfig.h)

add_library(
  seerepcom ${PROTO_SOURCES} ${PROTO_GRPC_SOURCES} ${FlatBuffers_GRPC_SOURCES}
)

add_dependencies(seerepcom FlatBuffersTarget)

set(INSTALL_HEADERS ${PROTO_HEADERS})
list(APPEND INSTALL_HEADERS ${PROTO_GRPC_HEADERS})
list(APPEND INSTALL_HEADERS ${FlatBuffers_HEADERS})

set_target_properties(seerepcom PROPERTIES PUBLIC_HEADER "${INSTALL_HEADERS}")

set(CMAKE_INSTALL_INCLUDEDIR include)
set(CMAKE_INSTALL_LIBDIR lib)
set(CMAKE_INSTALL_BINDIR bin)

install(
  TARGETS seerepcom
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
)

include(CMakePackageConfigHelpers)

configure_package_config_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/SeerepComConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/SeerepComConfig.cmake
  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  PATH_VARS CMAKE_INSTALL_INCLUDEDIR CMAKE_INSTALL_LIBDIR
)

# generate the version file for the config file
write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/SeerepComConfigVersion.cmake"
  VERSION "${seerep-com_VERSION_MAJOR}.${seerep-com_VERSION_MINOR}"
  COMPATIBILITY AnyNewerVersion
)

# install the generated python sources
install(
  DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
  FILES_MATCHING
  PATTERN "*.py"
)

# install the generated typescript sources
install(
  DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
  FILES_MATCHING
  PATTERN "*.ts"
)
# install the generated javascript sources
install(
  DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
  FILES_MATCHING
  PATTERN "*.js"
)

# install the configuration file
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/SeerepComConfig.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/SeerepComConfigVersion.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/SeerepCom
)

install(FILES "${PROJECT_BINARY_DIR}/SeerepComConfig.h"
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
)
